import networkx as nx
import matplotlib.pyplot as plt
from string import ascii_uppercase as al


number_of_nodes=int(input("Enter no. of Nodes in Graph 1: "))       #input of nodes for Graph 1
G=nx.MultiGraph()
n1=[]
for i in range(1,number_of_nodes+1):
	G.add_node(i)
	n1.append(i)

edges=int(input("Enter no. of edges in graph 1: "))                 #input of edges for Graph 1

for i in range(1,edges+1):
	  x, y = map(int, input().split())
	  G.add_edge(x,y)

l1=[]
for i in range(1,number_of_nodes+1):                                   #calculation of degree for each node of Graph 1
		d=G.degree(i)
		l1.append(d)

number_of_nodes2=int(input("Enter no. of Nodes in Graph 2: "))      #alphabetical input for Graph 2 nodes
g=nx.MultiGraph()

n2=[]
for i in range(ord('A'),ord('A')+number_of_nodes2):
	g.add_node(chr(i))
	n2.append(chr(i))

edges2=int(input("Enter no. of edges in graph 2: "))              #input of edges for Graph 2
for i in range(1,edges2+1):
	  x, y = map(str,input().split())
	  g.add_edge(x,y)

l2=[]                                                               #calculation of degree for Graph 2 nodes
for i in range(ord('A'),ord('A')+number_of_nodes2):
	  d=g.degree(chr(i))
	  l2.append(d)

plt.rcParams['figure.facecolor'] = 'salmon'                          #Graphics code for Graph 1 and Graph 2
plt.plot(linewidth=3)
mng = plt.get_current_fig_manager()
mng.window.state('zoomed')
pos = nx.random_layout(G)
nx.draw_networkx(G,pos)
plt.rcParams['figure.facecolor'] = 'teal'
plt.title("Graph 1")
plt.show()
nx.draw_networkx(g)
plt.title("Graph 2")
mng = plt.get_current_fig_manager()
mng.window.state('zoomed')
plt.show()


count1=0                                                             #calculating number of nodes with same degree in Graph 1
c1=[]
len1=len(l1)
for i in range(0,len1-1):
	if l1[i]==l1[i+1]:
		count1=count1+1
	else:
		count1+=1
		c1.append(count1)
		count1=0

count2=0                                                             #calculating number of nodes with same degree in Graph 2
c2=[]
len2=len(l2)
for i in range(0,len2-1):
	if l2[i]==l2[i+1]:
		count2+=1
	else:
		count2+=1
		c2.append(count2)
		count2=0

flag=1                                                               #checking isomorphism conditions i.e Graphs should have equal no. of nodes,edges,and equal no. of vertices with same degree
if number_of_nodes!=number_of_nodes2:
	flag=0
if edges!=edges2:
	flag=0
if c1!=c2:
	flag=0
if flag==0:
	print("Graphs are not isomorphic")
else:
	print("Graphs are isomorphic")
	plt.rcParams['figure.facecolor'] = 'green'
	plt.title("Transformation of Graph 1 to Graph 2")                #conversion of one graph to another
	newG=G
	diction = {x:i for x, i in enumerate(al, 1)}
	newG=nx.relabel_nodes(G,diction)
	pos1={}
	for i in G.nodes():
		pos1[chr(ord('A')+i-1)]=pos[i]
	nx.draw_networkx(newG,pos1,nodelist=n2,node_color='green')         #Graphics for new Graph generated by conversion
	mng = plt.get_current_fig_manager()
	mng.window.state('zoomed')
	plt.plot(linewidth=3)
	plt.show()
